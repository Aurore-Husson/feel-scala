name: Build and publish
on:
  push:
    branches: [master]
  release:
    types: [published]
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Detect release type
      run: |-
        if [[ "${{github.event.ref}}" == "refs/heads/master" ]]; then
          echo "::set-output name=type::SNAPSHOT"
        else
          echo "::set-output name=type::RELEASE"
        fi
      id: release-detection
    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Import Secrets
      uses: RichiCoder1/vault-action@v0.10.2
      with:
        url: ${{ secrets.STAGE_VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.STAGE_VAULT_ROLE_ID }}
        secretId: ${{ secrets.STAGE_VAULT_SECRET_ID }}
        secrets: |
          common/jenkins/main NEXUS_APP_CAMUNDA_COM_PSW | NEXUS_APP_CAMUNDA_COM_PSW;
          common/jenkins/main NEXUS_APP_CAMUNDA_COM_USR | NEXUS_APP_CAMUNDA_COM_USR;
    - name: Set up Nexus authentication
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: camunda-nexus
        server-username: NEXUS_APP_CAMUNDA_COM_USR
        server-password: NEXUS_APP_CAMUNDA_COM_PSW
    - name: Cache
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Update version in pom.xml (Release only)
      if: github.event.release
      run: mvn -B versions:set -DnewVersion=${{ github.event.release.tag_name }} -DgenerateBackupPoms=false
    - name: Run Maven (${{ steps.release-detection.outputs.type }})
      run: mvn -B clean install
    - name: Publish package (${{ steps.release-detection.outputs.type }})
      run: mvn -B deploy
    - name: Artchive artifacts
      run: |-
        ZIPFILE=${{github.event.repository.name}}-${{github.event.release.tag_name}}.zip
        zip $ZIPFILE $(find target/nexus-staging -name "*.jar")
        echo "::set-output name=filename::${ZIPFILE}"
      id: zip
    - name: Publish artifacts (Release only)
      if: github.event.release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.zip.outputs.filename }}
        asset_name: ${{ steps.zip.outputs.filename }}
        asset_content_type: application/zip
    - name: Checkout ${{ github.event.repository.default_branch }} and commit new development version (Release only)
      if: github.event.release
      run: |-
        git config --global user.name "Release Bot"
        git config --global user.email actions@github.com
        git fetch
        git checkout -b ${{ github.event.repository.default_branch }} --track origin/${{ github.event.repository.default_branch }}
        mvn -B org.apache.maven.plugins:maven-release-plugin:update-versions -DgenerateBackupPoms=false
        git add **pom.xml
        mvn -B scm:checkin -Dbasedir=. -Dmessage="release(v${{ github.event.release.tag_name }}): bump version" -DdeveloperConnectionUrl="scm:git:https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${{ github.event.repository.full_name }}.git"
